plugins {
    id "java-gradle-plugin"
    id "groovy"
    id "com.gradle.plugin-publish" version "0.9.7"

    id "net.ltgt.errorprone" version "0.0.11" apply false
    id "com.github.sherter.google-java-format" version "0.6" apply false
}
if (JavaVersion.current() == JavaVersion.VERSION_1_8) {
    apply plugin: 'net.ltgt.errorprone'
    dependencies {
        errorprone 'com.google.errorprone:error_prone_core:2.1.1'
    }

    apply plugin: 'com.github.sherter.google-java-format'
    googleJavaFormat {
        toolVersion = '1.4'
    }
}

group = 'net.ltgt.gradle'

if (JavaVersion.current().isJava9Compatible()) {
    tasks.withType(JavaCompile).all { options.compilerArgs.addAll(['--release', '7']) }
    tasks.withType(GroovyCompile).all { options.compilerArgs.addAll(['--release', '7']) }
}
gradle.taskGraph.whenReady { graph ->
    if (graph.hasTask(publishPlugins)) {
        assert JavaVersion.current().isJava7() || JavaVersion.current().isJava9Compatible() : "Releases must be built with JDK 7 or JDK 9 (make sure to clean and rebuild after changing JDK)"

        assert 'git diff --quiet --exit-code'.execute(null, rootDir).waitFor() == 0 : "Working tree is dirty"
        def process ='git describe --exact-match'.execute(null, rootDir)
        assert process.waitFor() == 0 : "Version is not tagged"
        version = process.text.trim() - ~'^v'
    }
}

repositories {
    jcenter()
}

dependencies {
    compile localGroovy()

    testCompile('com.netflix.nebula:nebula-test:6.0.1')
    testCompile('org.spockframework:spock-core:1.1-groovy-2.4') {
        exclude group: 'org.codehaus.groovy'
    }
}

test {
    inputs.file tasks.jar
    systemProperty("plugin", tasks.jar.archivePath)
    if (project.hasProperty("test.gradle-versions")) {
        systemProperty("test.gradle-versions", project.property("test.gradle-versions"))
    }
    testLogging {
        showExceptions = true
        showStackTraces = true
        exceptionFormat = 'FULL'
    }
}

gradlePlugin {
    plugins {
        aptPlugin {
            id = 'net.ltgt.apt'
            implementationClass = 'net.ltgt.gradle.apt.AptPlugin'
        }
        aptEclipsePlugin {
            id = 'net.ltgt.apt-eclipse'
            implementationClass = 'net.ltgt.gradle.apt.AptEclipsePlugin'
        }
        aptIdeaPlugin {
            id = 'net.ltgt.apt-idea'
            implementationClass = 'net.ltgt.gradle.apt.AptIdeaPlugin'
        }
    }
}

pluginBundle {
    website = 'https://github.com/tbroyer/gradle-apt-plugin'
    vcsUrl = 'https://github.com/tbroyer/gradle-apt-plugin'
    description = 'Gradle plugin making it easier/safer to use Java annotation processors'
    tags = [ 'annotation-processing', 'annotation-processors', 'apt' ]

    plugins {
        aptPlugin {
            id = 'net.ltgt.apt'
            displayName = 'Gradle APT plugin'
        }
        aptEclipsePlugin {
            id = 'net.ltgt.apt-eclipse'
            displayName = 'Gradle APT plugin (Eclipse integration)'
        }
        aptIdeaPlugin {
            id = 'net.ltgt.apt-idea'
            displayName = 'Gradle APT plugin (IDEA integration)'
        }
    }

    mavenCoordinates {
        groupId = project.group
        artifactId = project.name
    }
}
